import streamlit as st
import os # Para construir caminhos de arquivo de forma robusta
from PIL import Image # Biblioteca Pillow para carregar a imagem do √≠cone



# para lembrarem os √≠cones, usei os emojis
# icon %F0%9F%93%8C = "üìå"
# icon %F0%9F%93%8A = "üìä"
# icon %F0%9F%93%88 = "üìà"


# --- CONFIGURA√á√ÉO DA P√ÅGINA (DEVE SER A PRIMEIRA CHAMADA DO STREAMLIT) ---
# Caminho para a pasta de assets

# Fun√ß√£o para carregar o conte√∫do de um arquivo CSS
# Essa fun√ß√£o l√™ o arquivo CSS e retorna seu conte√∫do como uma string.
# O par√¢metro css_file_path √© o caminho para o arquivo CSS.
# O arquivo CSS deve estar no mesmo diret√≥rio que o script app.py
# ou em um subdiret√≥rio chamado assets.
# O caminho completo para o arquivo CSS √© constru√≠do usando os.path.join
# e os.path.dirname(__file__) para garantir que o caminho funcione
# corretamente em diferentes sistemas operacionais.
# O arquivo CSS deve ser lido como texto, ent√£o usamos open() com o modo 'r'.
def load_css_file(css_file_path):
    with open(css_file_path) as f:
        return f.read()

# Definindo o diret√≥rio de ativos (assets)
ASSETS_DIR = os.path.join(os.path.dirname(__file__), "assets")
# Definindo o caminho para o √≠cone do aplicativo
ICON_PATH = os.path.join(ASSETS_DIR, "icon_nai_cz.png")


# Tenta carregar o √≠cone. Se n√£o encontrar, usa um emoji como fallback.
try:
    page_icon_img = Image.open(ICON_PATH)
except FileNotFoundError:
    page_icon_img = "üí°" # Um emoji como fallback se a imagem n√£o for encontrada
    st.warning(f"√çcone n√£o encontrado em {ICON_PATH}. Usando emoji padr√£o.")

# Configura√ß√£o da p√°gina
# Aqui voc√™ pode definir o t√≠tulo, √≠cone, layout e estado inicial da barra lateral
# O t√≠tulo e o √≠cone aparecem na aba do navegador
# O layout pode ser "centered" ou "wide"
# O estado inicial da barra lateral pode ser "auto", "expanded" ou "collapsed"
# O layout "wide" faz com que o conte√∫do ocupe toda a largura da tela
# O layout "centered" centraliza o conte√∫do na tela
st.set_page_config(
    page_title="Meu Site Padr√£o",  # T√≠tulo que aparece na aba do navegador
    page_icon=page_icon_img,       # Pode ser um caminho para uma imagem, um emoji, ou um objeto Image da Pillow
    layout="wide",                 # Outras op√ß√µes: "centered"
    initial_sidebar_state="expanded" # Outras op√ß√µes: "auto", "collapsed"
)


# Carregar e aplicar o CSS global (style.css)
# Este CSS ser√° aplicado sempre, independente do tema
global_css_path = os.path.join(ASSETS_DIR, "style.css")
if os.path.exists(global_css_path):
    global_css = load_css_file(global_css_path)
    st.markdown(f"<style>{global_css}</style>", unsafe_allow_html=True)
else:
    st.warning(f"Arquivo CSS global n√£o encontrado: {global_css_path}")


# Fun√ß√£o para aplicar o CSS do tema escolhido
def apply_theme_css(theme_name):
    css_file_name = ""
    if theme_name == "Escuro":
        css_file_name = "dark_theme.css"
    elif theme_name == "Claro":
        css_file_name = "light_theme.css"
    # Adicione mais temas se necess√°rio

    if css_file_name:
        theme_css_path = os.path.join(ASSETS_DIR, css_file_name)
        if os.path.exists(theme_css_path):
            theme_css = load_css_file(theme_css_path)
            # Usamos uma chave √∫nica para o st.markdown do tema para que ele seja substitu√≠do
            # ao inv√©s de acumulado quando o tema muda.
            st.markdown(f"<style id='theme-style'>{theme_css}</style>", unsafe_allow_html=True)
        else:
            st.warning(f"Arquivo CSS do tema '{theme_name}' n√£o encontrado: {theme_css_path}")

# --- GERENCIAMENTO DO ESTADO DO TEMA (SESSION STATE) ---

# Inicializar o session_state para o tema
if 'selected_theme' not in st.session_state:
    # O config.toml ainda define o tema base inicial que o Streamlit usa para seus componentes.
    # Nosso CSS customizado vai sobrescrever/complementar isso.
    # Se voc√™ tem `base = "dark"` no config.toml, seu tema inicial aqui deve ser "Escuro".
    st.session_state.selected_theme = "Claro" # Ou "Escuro" se for seu padr√£o

# Aplicar o CSS do tema atual (inicial ou ap√≥s mudan√ßa)
apply_theme_css(st.session_state.selected_theme)


# --- INTERFACE DO USU√ÅRIO ---

#### experimental, Michel 28/04/2025
# n√£o gostei da experiencia, vou deixar para futuro 
# PAGES = {
#     "üìä Dashboard": Dashboard.show_page,
#     "üìà An√°lise Detalhada": Analise_Detalhada.show_page,
# }
####

# Bot√£o de escolha de tema na barra lateral
st.sidebar.title("üé® Configura√ß√µes")
# Adiciona uma op√ß√£o de tema na barra lateral
# O √≠ndice atual do tema √© obtido para manter a sele√ß√£o correta
# entre as recargas da p√°gina.
# O √≠ndice √© baseado na lista de temas dispon√≠veis
# Aqui, estamos assumindo que os temas s√£o "Claro" e "Escuro".
# Voc√™ pode adicionar mais temas √† lista se necess√°rio.
# A lista de temas deve ser a mesma que a usada na fun√ß√£o apply_theme_css (gerenciamento do tema).
# para garantir que o √≠ndice corresponda corretamente.
theme_options = ["Claro", "Escuro"]
# Se o tema atual n√£o estiver na lista, use o primeiro tema como padr√£o
if st.session_state.selected_theme not in theme_options:
    st.session_state.selected_theme = theme_options[0]
# Obtemos o √≠ndice do tema atual na lista de op√ß√µes
# Isso √© necess√°rio para manter a sele√ß√£o correta entre as recargas da p√°gina.
current_theme_index = theme_options.index(st.session_state.selected_theme)


# Adiciona um seletor de tema na barra lateral
# O √≠ndice atual do tema √© usado para manter a sele√ß√£o correta
# entre as recargas da p√°gina.
# O key √© importante para que o Streamlit saiba que este widget √© √∫nico
# e deve ser mantido no session_state.
# O key tamb√©m √© importante para evitar conflitos com outros widgets
# que possam ter o mesmo nome.
chosen_theme = st.sidebar.radio(
    "Escolha o tema:",
    options=theme_options,
    index=current_theme_index,
    key="theme_selector" # Uma chave para o widget
)

# adicionar ao slidebar um novo menu
st.sidebar.write("---")
st.sidebar.header("Menu de Navega√ß√£o")
# Adiciona op√ß√µes de navega√ß√£o na barra lateral
# Aqui voc√™ pode adicionar links ou bot√µes para navegar entre diferentes partes do seu app
# ou para outras p√°ginas do seu app.
# Exemplo de op√ß√µes de navega√ß√£o
# Voc√™ pode usar st.sidebar.button ou st.sidebar.selectbox
# para criar bot√µes ou caixas de sele√ß√£o para navega√ß√£o.
st.sidebar.write("Escolha uma op√ß√£o:")

########################################################3
# estou com problemas para adicionar os bot√µes de navega√ß√£o
# Link para outra p√°gina ou se√ß√£o do app
# Aqui voc√™ pode adicionar links ou bot√µes para navegar entre diferentes partes do seu app

st.sidebar.write("1. Op√ß√£o 1")
st.sidebar.write("2. Op√ß√£o 2")
st.sidebar.write("3. Op√ß√£o 3")

#############################################################

# Adiciona um bot√£o para sair do app
st.sidebar.write("---")
st.sidebar.button("Sair", on_click=st.stop) # Para sair do app
# Adiciona um bot√£o para voltar para a p√°gina inicial
st.sidebar.button("Voltar", on_click=st.stop) # Para voltar para a p√°gina inicial
# Adiciona um bot√£o para abrir o menu de ajuda
st.sidebar.button("Ajuda", on_click=st.stop) # Para abrir o menu de ajuda

# Se a escolha do tema mudou, atualiza o session_state e re-executa o app
if chosen_theme != st.session_state.selected_theme:
    st.session_state.selected_theme = chosen_theme
    st.rerun() # Essencial para que o novo CSS seja aplicado


# Resto do seu aplicativo Streamlit
st.title("App Modelo com Temas CSS Externos")
# printa na tela com qual tema estamos
st.write(f"Tema atual: {st.session_state.selected_theme}")

st.button("Bot√£o Prim√°rio")
st.text_input("Campo de Texto")
st.selectbox("Caixa de Sele√ß√£o", ["Op√ß√£o 1", "Op√ß√£o 2"])
st.slider("Slider", 0, 100, 50)
st.date_input("Seletor de Data")

st.write("---")
st.write("vamos iniciar nessa base...")